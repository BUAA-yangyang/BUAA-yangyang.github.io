<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL浅谈</title>
      <link href="/2024/03/04/sql-qian-tan/"/>
      <url>/2024/03/04/sql-qian-tan/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL浅谈"><a href="#SQL浅谈" class="headerlink" title="SQL浅谈"></a>SQL浅谈</h1><h2 id="一、SQL简介"><a href="#一、SQL简介" class="headerlink" title="一、SQL简介"></a>一、SQL简介</h2><h3 id="1-What’s-this"><a href="#1-What’s-this" class="headerlink" title="1.What’s this?"></a><em>1.What’s this?</em></h3><p><strong>SQL</strong>（Structured Query Language）是“<em>结构化查询语言</em>”，它是对<mark>关系型数据库</mark>的操作语言。它可以应用到所有关系型数据库中，例如：MySQL、Oracle、SQL Server 等。</p><h3 id="2-Classification"><a href="#2-Classification" class="headerlink" title="2.Classification"></a><em>2.Classification</em></h3><ul><li><mark>DDL</mark>（Data Definition Language) : <strong>数据定义语言</strong>，用来定义数据库对象：库、表、列等；</li><li><mark>DML</mark>（Data Manipulation Language）：<strong>数据操作语言</strong>，用来定义数据库记录（数据）；</li><li><mark>DCL</mark>（Data Control Language）：<strong>数据控制语言</strong>，用来定义访问权限和安全级别；</li><li><mark>DQL</mark>（Data Query Language）：<strong>数据查询语言</strong>，用来查询记录（数据）；<h3 id="3-Warning"><a href="#3-Warning" class="headerlink" title="3.Warning!!!"></a><em>3.Warning!!!</em></h3></li><li>SQL 语句可以<strong><em>单行或多行</em></strong>书写，以<mark>分号</mark>结尾；</li><li>可以用空格和缩进来来增强语句的可读性；</li><li><strong>关键字不区别大小写</strong>，建议使用<mark>大写</mark>；</li></ul><h2 id="二、DDL"><a href="#二、DDL" class="headerlink" title="二、DDL"></a>二、DDL</h2><h3 id="1-数据库操作"><a href="#1-数据库操作" class="headerlink" title="1.数据库操作"></a><em>1.数据库操作</em></h3><ol><li>查询：<br> 查询所有数据库：<code>show databases;</code><br> 查询当前数据库：<code>select database();</code></li><li>创建：<code>create database if not exists xxx;</code><br> <mark>Attention</mark>：<mark>if not exists</mark><em>可以省略</em>，其用于当所创建的数据库已<strong>存在</strong>时可减少报错。</li><li>删除：<code>drop database if exists xxx;</code><br> <mark>Attention</mark>：<mark>if exists</mark>作用同上。</li><li>使用：<code>use xxx;</code><h3 id="2-表操作"><a href="#2-表操作" class="headerlink" title="2.表操作"></a><em>2.表操作</em></h3></li><li>查询：<br> 查询当下数据库的所有表：<code>show tables;</code><br> 查询指定表结构：<code>desc xxx;</code><br> 查询指定表的建表语句：<code>show create table xxx;</code></li><li>创建：<blockquote><p>`create table xxx(<br><strong>字段1</strong>   <em>字段1类型</em> [Comment   字段1注释]，<br>……<br><strong>字段n</strong>   <em>字段n类型</em> [Comment   字段n注释]<br>) [Comment   表注释];<br><mark>Attention</mark>：[……]为可选参数，且最后一个字段不跟逗号.</p></blockquote></li><li>修改：<br> 添加字段：<code>alter table xxx add 字段名 字段类型（长度）[comment 注释] [约束];</code><br> 修改数据类型：<code>alter table xxx modify 字段名 新字段类型（长度）;</code><br> 修改字段名和字段类型：<code>alter table xxx change 旧字段名 新字段名 新字段类型（长度）[comment 注释];</code><br> 删除字段：<code>alter table xxx drop 字段名;</code><br> 修改表名：<code>alter table xxx rename to 新表名;</code><br> 删除指定表：<code>drop table if exists xxx;</code><br> 删除指定表并重新创建该表：<code>truncate table xxx;</code><blockquote><p><mark>Attention</mark>：最后一条表明删除该表的数据而不改变该表的结构.</p></blockquote></li></ol><h2 id="三、DML"><a href="#三、DML" class="headerlink" title="三、DML"></a>三、DML</h2><h3 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="1.添加数据"></a><em>1.添加数据</em></h3><ol><li>给指定字段添加数据：<code>insert into xxx (字段1，……，字段n) values (值1,……，值n);</code></li><li>给全部字段添加数据：<code>insert into xxx values (值1，……值n);</code></li><li>指定字段批量添加数据：<code>insert into xxx (字段1，……字段n) values (值1,……，值n)，……，(值1,……，值n)；</code></li><li>全部字段批量添加数据：<code>insert into xxx values (值1,……，值n)，……，(值1,……，值n)；</code><blockquote><p><mark>Attention</mark>：<br><em>①插入字段的名称与其数据的顺序需要对应；</em><br><em>②字符串和日期型数据需要写在引号中；</em></p><h3 id="2-修改数据"><a href="#2-修改数据" class="headerlink" title="2.修改数据"></a><em>2.修改数据</em></h3><p><code>update xxx set 字段名1=值1，……，字段名n=值n [where 条件];</code><br><mark>Attention</mark>：<em>条件语句为可选项，如不加条件语句则会更新表中所有数据的相应字段；</em></p><h3 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3.删除数据"></a><em>3.删除数据</em></h3><p><code>delete from xxx [where 条件];</code><br><mark>Attention</mark>：<br><em>①这里的条件语句也为可选项，若不选则会删除整张表的所有数据；</em><br><em>②不能单纯删改某个数据的某个字段（可以使用update实现）；</em></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS小结</title>
      <link href="/2023/11/06/mips/"/>
      <url>/2023/11/06/mips/</url>
      
        <content type="html"><![CDATA[<h1 id="MIPS"><a href="#MIPS" class="headerlink" title="MIPS"></a>MIPS</h1><h2 id="1-数据的声明（宏定义）"><a href="#1-数据的声明（宏定义）" class="headerlink" title="1.数据的声明（宏定义）"></a>1.数据的声明（宏定义）</h2><ul><li>格式：  name:  .storage_type  value <pre><code>var : .word  3           #定义为子类型，初始值为3array :  .byte  &#39;a&#39;,&#39;b&#39;  #定义为字节类型，初始值为两个字符a和barray :  .space 40       #定义了一个数组，有40字节大小，可以存储10个整数或者40个字符string : .asciiz  &quot;hello world\n&quot;  #定义为字符串，字符串以null结尾</code></pre></li></ul><hr><h2 id="2-syscall指令"><a href="#2-syscall指令" class="headerlink" title="2.syscall指令"></a>2.syscall指令</h2><p><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/36.png?raw=true" alt="指令参考图"></p><h2 id="gt-v0寄存器存储操作码，a0存储数据"><a href="#gt-v0寄存器存储操作码，a0存储数据" class="headerlink" title="&gt; v0寄存器存储操作码，a0存储数据"></a>&gt; v0寄存器存储操作码，a0存储数据</h2><h2 id="3-标签label"><a href="#3-标签label" class="headerlink" title="3.标签label"></a>3.标签label</h2><h2 id="标签名存储的为特点代码段的起始位置，在跳转指令与分支指令中可以简便地跳转。所以利用标签可以方便我们构造条件语句和循环语句（细节见后文）"><a href="#标签名存储的为特点代码段的起始位置，在跳转指令与分支指令中可以简便地跳转。所以利用标签可以方便我们构造条件语句和循环语句（细节见后文）" class="headerlink" title="+ 标签名存储的为特点代码段的起始位置，在跳转指令与分支指令中可以简便地跳转。所以利用标签可以方便我们构造条件语句和循环语句（细节见后文）"></a>+ 标签名存储的为特点代码段的起始位置，在跳转指令与分支指令中可以简便地跳转。所以利用标签可以方便我们构造条件语句和循环语句（细节见后文）</h2><h2 id="4-循环"><a href="#4-循环" class="headerlink" title="4.循环"></a>4.循环</h2><pre><code>      li $t0 100  # $t0存储循环次数loop: do sth      addi $t0,$t0,-1   # i--      bgtz $t0,loop     # if $t0&gt;0,继续执行循环操作      j loop_endloop_end:</code></pre><hr><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h2><pre><code>.dataarray: .space 40           # 存储这些数需要用到数组，数组需要使用 10 * 4 = 40 字节                           # 一个 int 整数需要占用 4 个字节，需要存储 10 个 int 整数                           # 因此，array[0] 的地址为 0x00，array[1] 的地址为 0x04                           # array[2] 的地址为 0x08，以此类推。str:   .asciiz &quot;The numbers are:\n&quot;space: .asciiz &quot; &quot;.textli $v0,5syscall                    # 输入一个整数move $s0, $v0              # $s0 is nli $t0, 0                  # $t0 循环变量loop_in:beq $t0, $s0, loop_in_end  # $t0 == $s0 的时候跳出循环li $v0, 5syscall                    # 输入一个整数sll $t1, $t0, 2            # $t1 = $t0 &lt;&lt; 2，即 $t1 = $t0 * 4sw $v0, array($t1)         # 把输入的数存入地址为 array + $t1 的内存中addi $t0, $t0, 1           # $t0 = $t0 + 1j loop_in                  # 跳转到 loop_inloop_in_end:la $a0, strli $v0, 4syscall                    # 输出提示信息li $t0, 0loop_out:beq $t0, $s0, loop_out_endsll $t1, $t0, 2            # $t1 = $t0 &lt;&lt; 2，即 $t1 = $t0 * 4lw $a0, array($t1)         # 把内存中地址为 array + $t1 的数取出到 $a0 中li $v0, 1syscall                    # 输出 $a0la $a0, spaceli $v0, 4syscall                    # 输出一个空格addi $t0, $t0, 1j loop_outloop_out_end:li $v0, 10syscall                    # 结束程序</code></pre><ul><li>总体思路为先利用space定义数组大小，接着利用循环逐个读入数组元素，其中array[i]表示为array(t1),t1=4*i</li><li>利用lw来存储数组元素，利用sw来访问数组元素</li></ul><hr><h2 id="6-宏定义"><a href="#6-宏定义" class="headerlink" title="6.宏定义"></a>6.宏定义</h2><ul><li>不带参数的宏定义：<pre><code>.macro macro_name# 代码段.end_macro</code></pre></li><li>带参数的宏定义：<pre><code>.macro macro_name(%parameter1, %parameter2, ...)# 代码段.end_macro</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIPS指令集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承</title>
      <link href="/2023/10/12/ji-cheng/"/>
      <url>/2023/10/12/ji-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="1-理解继承（几句很棒的话）"><a href="#1-理解继承（几句很棒的话）" class="headerlink" title="1.理解继承（几句很棒的话）"></a>1.理解继承（几句很棒的话）</h2><ul><li>继承是在保留原有类的数据成员和成员函数的基础上，派生出新类，新的类可以有某种程度的变异；</li><li>通过继承，新类自动具有了原有类的成员属性和成员方法，因而只需定义原有类型没有的成员属性和成员方法。通过继承和派生形成的类族，反映了面向对象问题域、主题等概念</li><li>子类拥有父类的所有属性和方法，只不过父类的私有属性和方法，子类是无法直接访问到的</li></ul><hr><h2 id="2-子类构造器"><a href="#2-子类构造器" class="headerlink" title="2.子类构造器"></a>2.子类构造器</h2><ul><li>子类的构造方法(无论是否有参),若无显性调用，则会默认调用父类的无参构造方法；否则一般要对父类进行显性调用<blockquote><ul><li>子类在创建对象时，利用父类的构造方法完成继承部分的创建，利用另写的构造方法完成拓展部分的创建</li><li>注意this和supeer关键字的使用：其用作构造方法时需要放在第一句</li></ul></blockquote></li><li>父类的构造方法不能被子类直接继承</li></ul><hr><h2 id="3-继承中的权限问题-此处不讨论public"><a href="#3-继承中的权限问题-此处不讨论public" class="headerlink" title="3.继承中的权限问题(此处不讨论public)"></a>3.继承中的权限问题(此处不讨论public)</h2><h3 id="Private"><a href="#Private" class="headerlink" title="Private"></a><em>Private</em></h3><ul><li>若父类中有private修饰的属性和方法，则这些私有属性和方法是可以继承到子类中的，但子类无法访问这些属性和方法(supper调用也不行)<blockquote><p>子类的构造方法中涉及到父类构造方法的调用，而在父类的构造方法中可以访问上述的私有属性和方法，这也经常会给我们造成访问的错觉<br>这里关于”继承”有个很有趣的辨析：在Java的官方文档中是这样描述private的：”子类不能继承父类的私有属性，但是如果子类中公有的方法影响到了父类私有属性，那么私有属性是能够被子类使用的”。我觉得这样的描述模糊了”继承”这个词的含义。<br>事实上，在我们创建一个子类的对象时，它会首先调用父类的构造方法来为所有父类中的属性和方法划分内存(无论它们是private的，还是被重写、覆盖的巴拉巴拉)，即先创建了一个完整的父类对象，然后再在这个基础上添加子类独特的属性和方法。<br>通过观察上述的过程，你会发现：欸嘿！我的子类对象中有那么几个成员，虽然访问不了，但它们的确实实在在存在呀！这个就是官方所说的”无法继承”的成员</p></blockquote></li><li>对于私有成员，真的只能远观而不可亵玩焉吗？非也非也！我们可以在父类中设置对应的public的Setter和Getter来访问这些不可”访问”的成员<h3 id="Default"><a href="#Default" class="headerlink" title="Default"></a><em>Default</em></h3></li><li>父类中默认的成员可以被同一个包中的子类中的实例对象直接访问，但不同包中是不行的<h3 id="Protected"><a href="#Protected" class="headerlink" title="Protected"></a><em>Protected</em></h3></li><li>若位于不同包中，子类的实例对象可以访问protected成员，但是父类的实例对象不行<blockquote><p>这里访问的protected成员只能是改子类自己继承的，其他比如：父类实例对象的protected成员和其他子类的共同protected成员都是不能访问的<br>若这个protected成员是静态的，则没有上述”亲自继承”的限制</p></blockquote></li><li>若父子类位于同一个包中，则与default一致</li></ul><hr><h2 id="4-向上转型-重写与覆盖"><a href="#4-向上转型-重写与覆盖" class="headerlink" title="4.向上转型(重写与覆盖)"></a>4.向上转型(重写与覆盖)</h2><ul><li>所有属性，私有、静态的方法，若出现同名情况(名称、参数、返回值类型完全相同)，都为隐藏型，即调用引用类型的成员</li><li>其他方法，若出现同名情况，都为覆盖型，即调用实例对象的成员</li><li>向上转型的意义：可以简化代码<blockquote><p>对于不同子类中类似的方法(即都是从父类中同一个方法覆盖而来)的分别使用，若使用向上转型：写一个函数，形参类型为父类类型(将输入的子类向上转型)，函数体执行那个”被覆盖”的方法即可。<br>因为方法为覆盖型，所以在函数体里调用的还是实例对象的方法，做到了函数体的复用，简化了代码</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象的三大特称 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2023/10/11/shu-zhuang-shu-zu/"/>
      <url>/2023/10/11/shu-zhuang-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="Binary-Index-Tree"><a href="#Binary-Index-Tree" class="headerlink" title="Binary Index Tree"></a>Binary Index Tree</h1><h2 id="1-树状数组概述"><a href="#1-树状数组概述" class="headerlink" title="1.树状数组概述"></a>1.树状数组概述</h2><ul><li>产生需求：当我们多次求解一个数组的任意区间和时，如果数组的元素发生了改变，那我们所有的结果都要重新计算，这样的代价非常大</li><li>优化之处：树状数组则通过另外建立一个管理数组用来分级管理我们原来的数组。在管理数组中的每个元素都只管理部分的数据，所有当我们再次面临数据更改的问题时，我们就只需更改部分管理数组元素即可<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/18.png?raw=true" alt="树状数组示意图"></li></ul><hr><h2 id="2-一维树状数组"><a href="#2-一维树状数组" class="headerlink" title="2.一维树状数组"></a>2.一维树状数组</h2><h3 id="管理数组c-长度分配"><a href="#管理数组c-长度分配" class="headerlink" title="管理数组c[]长度分配"></a><em>管理数组c[]长度分配</em></h3><ul><li>引入lowbit(x)函数：x&amp;（-x<sub>补码</sub>）</li><li>c[i]包含的数据个数 = lowbit(i)<h3 id="前驱和后继"><a href="#前驱和后继" class="headerlink" title="前驱和后继"></a><em>前驱和后继</em></h3></li><li>c[i]的直接前驱：c[i]左侧紧邻的子树的根→c[i-lowbit(i)]</li><li>c[i]的直接后驱：c[i]的父节点→c[i+lowbit(i)]</li><li>c[i]的前驱：c[i]的直接前驱、直接前驱的直接前驱……→c[i]左侧所有子树的根</li><li>c[i]的后继：c[i]的直接后继、直接后继的直接后继……→c[i]的所有祖先<h3 id="前缀和查询算法"><a href="#前缀和查询算法" class="headerlink" title="前缀和查询算法"></a><em>前缀和查询算法</em></h3><pre><code>int sum(int i)&#123;  int sum=0;  while(i&gt;0)&#123;      sum+=c[i];      i-=lowbit(i);  &#125;  return sum;&#125;</code></pre><h3 id="点更新算法"><a href="#点更新算法" class="headerlink" title="点更新算法"></a><em>点更新算法</em></h3></li><li>若a[i]+=delta,则只需把c[i]及其祖先节点都加上delta即可<pre><code>void add(int i,int delta)&#123;  while(i&lt;=n)&#123;      c[i]+=delta;      i+=lowbit(i);  &#125;&#125;</code></pre><blockquote><p>树状数组的下标需要从1开始，因为lowbit(0)会陷入死循环</p><h3 id="区间和查询算法"><a href="#区间和查询算法" class="headerlink" title="区间和查询算法"></a><em>区间和查询算法</em></h3><pre><code>int sum_plus(int i,int j)&#123;  return sum(j)-sum(i-1);&#125;</code></pre><h3 id="建立树状数组"><a href="#建立树状数组" class="headerlink" title="建立树状数组"></a><em>建立树状数组</em></h3><pre><code>for(i=0;i&lt;n;i++)&#123;  add(i+1,a[i]);&#125;</code></pre><p>把建立的过程看成是n次点更新即可</p></blockquote></li></ul><hr><h2 id="3-二维树状数组"><a href="#3-二维树状数组" class="headerlink" title="3.二维树状数组"></a>3.二维树状数组</h2><h3 id="查询前缀和"><a href="#查询前缀和" class="headerlink" title="查询前缀和"></a><em>查询前缀和</em></h3><ul><li>实际上是求矩阵(1,1)到(x,y)的区间和<pre><code>int sum(int x,int y)&#123;  int sum=0;  for(i=x;i&gt;=1;i-=lowbit(i))&#123;      for(j=y;j&gt;=1;j-=lowbit(j))&#123;          sum+=c[i][j];      &#125;  &#125;  return sum;&#125;</code></pre><h3 id="点更新"><a href="#点更新" class="headerlink" title="点更新"></a><em>点更新</em></h3></li><li>若a[x][y]+=delta,则其所有的父节点都加上delta<pre><code>void add(int x,int y,int delta)&#123;  for(i=x;i&lt;=n;i+=lowbit(i))&#123;      for(j=y;j&lt;=n;j+=lowbit(j))&#123;          c[i][j]+=delta;      &#125;  &#125;&#125;</code></pre><h3 id="查询区间和"><a href="#查询区间和" class="headerlink" title="查询区间和"></a><em>查询区间和</em></h3><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/19.png?raw=true" alt="示意图"><pre><code>int sum_plus(int x1,int y1,int x2,int y2)&#123;  return sum(x2,y2)-sum(x1-1,y2)-sum(x2,y1-1)+sum(x1-1,y1-1)&#125;</code></pre><h3 id="建立树状数组-1"><a href="#建立树状数组-1" class="headerlink" title="建立树状数组"></a><em>建立树状数组</em></h3></li><li>同上</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2023/10/11/dong-tai-gui-hua/"/>
      <url>/2023/10/11/dong-tai-gui-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h1><h2 id="1-浅谈动态规划"><a href="#1-浅谈动态规划" class="headerlink" title="1.浅谈动态规划"></a>1.浅谈动态规划</h2><ul><li>这是一种适用于解决<strong>可递归问题</strong>的优化方法，这里的递归涉及到了<strong>分治</strong>（转为子问题）的思想。<blockquote><p>注意区分动态规划与分治：</p><ul><li>分治的子问题一定是<strong>相互独立</strong>的，即它分出来的每个子问题都可以作为一个独立的问题，而动态规划的子问题不一定相互独立</li><li><strong>动态规划</strong>的子问题存在<strong>重叠部分</strong>，即不同的子问题可能会<strong>多次使用相同的中间结果</strong>；而<strong>分治</strong>的子问题之间相互独立，<strong>不存在重叠的部分</strong>。</li></ul></blockquote></li><li>动态规划相对于普通的暴力遍历方法的<strong>优化之处</strong>在于：它运用了历史记录，即通过<strong>记忆数组</strong>来存放会重复用到的结果</li></ul><hr><h2 id="2-动态规划的步骤"><a href="#2-动态规划的步骤" class="headerlink" title="2.动态规划的步骤"></a>2.动态规划的步骤</h2><ul><li><strong>赋予数组元素的含义</strong>：上文所说，动态规划会用到记忆数组，这个记忆数组dp[]是我们自己定义的，所以要赋予dp[i]特定的语义<blockquote><p>能否准确地定义好你的记忆数组dp[]常常是我们能否能准确切入题目的关键</p></blockquote></li><li><strong>找出数组元素之间的关系式</strong>：当我们要计算dp[n]时，它可能和dp[n-1]和dp[n-2]这类子问题有关，找出它们的最优关系式即可求解dp[n]<blockquote><p>注意：上述子问题可能组合成多种不同的表达式来表达dp[n]，所以我们一开始可能要列出很多表达式，然后逐一分析去寻找那个最优的来最终表达我们的dp[n]</p></blockquote></li><li><strong>找出初始值</strong>：对于每个适用于dp算法的问题，我们都能不通过dp算法求出初始的一个或多个值<blockquote><p>你可能会纳闷：到底哪些是初始值呢？一般来说：对于一维数组，是dp[0]和dp[1]这种前几个的情况；对于二维数组来说，一般是dp[0][0……n-1]和dp[0……n-1][0]这种边界情况</p></blockquote></li></ul><hr><h2 id="3-具体解法思路"><a href="#3-具体解法思路" class="headerlink" title="3.具体解法思路"></a>3.具体解法思路</h2><ul><li><strong>带备忘的自顶向下法</strong>：我们从父问题开始，<strong>逐步向下</strong>求解对应的子问题时，我们先查看记忆数组里这个子问题的解是否被放进去了，如果有，那么直接套用这个解就不必再求这个解了，如果没有，则再把这个子问题分解成几个孙问题来求，求出的过程中我们不仅有了这个子问题的解，也会求出几个孙问题的解，把它们都放入记忆数组中即可</li><li><strong>自底向上法</strong>：我们从最底层的子问题开始逐步向上求解。在求解父问题的过程中，我们就可以直接在它的表达式里直接套用之前以前求过的子问题的解<blockquote><p>二者的区别：前者是把<strong>一部分</strong>（实际表达式中会用到）的子问题求出来并放入记忆数组中；而后者则是把<strong>所有的子问题</strong>都求出来并放入记忆数组中</p></blockquote></li><li><strong>重构解</strong>：将原来的记忆数组升级成<strong>记忆结构体</strong>，结构体中有两个数组，一个是原来的记忆数组，另一个是<strong>存储分解方法的数组</strong>。具体方法和前文没什么区别，只不过在放入记忆数组的时候同时把当时的分解方法存入那个存储数组。<blockquote><p>光说不练假把式，下面看一下一些很经典的案例</p><h2 id="4-经典案例（由于篇幅有限，本文故不详细讲解每题，具体的解法大家可以自行上网查询）"><a href="#4-经典案例（由于篇幅有限，本文故不详细讲解每题，具体的解法大家可以自行上网查询）" class="headerlink" title="4.经典案例（由于篇幅有限，本文故不详细讲解每题，具体的解法大家可以自行上网查询）"></a>4.经典案例（由于篇幅有限，本文故不详细讲解每题，具体的解法大家可以自行上网查询）</h2></blockquote></li><li>青蛙跳台阶：简单的一维问题</li><li>网格坐标移动：简单的二维问题</li><li>网格坐标移动升级版（考虑路径代价最小）：较复杂的二维问题</li><li>单词转换（考虑操作代价最小）：比较难的二维问题<blockquote><p>本题由于操作的不同，所以dp[n]有多种表达式，这时需要我们分情况讨论，然后选出那个最优子结构</p></blockquote></li><li>数字三角形（路径代价最小）：有意思的二维问题（生动形象的自顶向下和自底向上方法运用的案例）</li><li>钢管切割问题（售价最高）：经典的一维问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装</title>
      <link href="/2023/10/09/feng-zhuang/"/>
      <url>/2023/10/09/feng-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h2 id="1-封装的含义"><a href="#1-封装的含义" class="headerlink" title="1.封装的含义"></a>1.封装的含义</h2><ul><li>首先来一个简单的例子：假设你在注册一个QQ账号，其中需要你实名制上网，当你在“性别”一栏填入“武装直升机”时，系统会自动拒绝你的填写，并要求你重新填写，直到你填写“男”或者“女”后才能让你继续填写下一项信息→这就是一个封装案例：QQ的注册系统不会让你直接访问它的“性别”属性，这样避免了你随意填写自己的性别，相反的，它只会给你提供无数次“机会”：不合理的答案它会自动过滤并要求你再次填写，直到你填入了一个合理的答案。</li><li>通过上面的例子，我们不难发现，封装其实是一个非常符合我们“偷懒且高效”性格的方法：它隐藏了那些令人头痛的属性设置、方法实现等一系列技术细节，它提前把这些难题都解决了并且让你无法接触到这些技术细节，它只会为你提供一个个窗口，让你在提前被划好的范围里去进行合理的操作：比如我们并不知道可乐是怎样生产的，售货员只是递给了我们一根吸管让我们去安心地享用。🥤🥤🥤</li><li>总结：隐藏属性、方法或实现细节的过程称为封装</li></ul><hr><h2 id="2-使用封装的好处"><a href="#2-使用封装的好处" class="headerlink" title="2.使用封装的好处"></a>2.使用封装的好处</h2><ul><li>提高了程序的安全性，保护数据（禁止了非法数据参与操作）</li><li>隐藏代码的实现细节（使用起来更加方便）</li><li>统一接口</li><li>增强系统的可维护性（只需要你修改Set和Get方法，因为你已经统一了接口👆）</li></ul><hr><h2 id="3-如何使用封装"><a href="#3-如何使用封装" class="headerlink" title="3.如何使用封装"></a>3.如何使用封装</h2><ul><li>首先将对应的属性和易被感染的方法用”Private”隐藏起来，将其对应的Set与Get方法用”Public”公开，对外提供接口</li><li>修饰符访问权限：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/17.png?raw=true" alt="修饰符访问权限"></li><li>在Set方法里设置相应的逻辑，对非法数据与操作进行过滤</li></ul><hr><h2 id="4-封装的具体应用：单例模式"><a href="#4-封装的具体应用：单例模式" class="headerlink" title="4.封装的具体应用：单例模式"></a>4.封装的具体应用：单例模式</h2><ul><li>产生原因：希望使用者不能自己随意创建该类的对象，只能获取一个类中自己产生的对象→即该类在内存中只有一个对象存在（系统日志、配置文件……）</li><li>该类一般没有属性，无法继承，无法拓展，也无法被更改</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象的三大特称 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时序逻辑</title>
      <link href="/2023/10/09/shi-xu-luo-ji/"/>
      <url>/2023/10/09/shi-xu-luo-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="时序逻辑"><a href="#时序逻辑" class="headerlink" title="时序逻辑"></a>时序逻辑</h1><hr><h2 id="1-锁存器与触发器"><a href="#1-锁存器与触发器" class="headerlink" title="1.锁存器与触发器"></a>1.锁存器与触发器</h2><h3 id="时序逻辑电路特点"><a href="#时序逻辑电路特点" class="headerlink" title="时序逻辑电路特点"></a><em>时序逻辑电路特点</em></h3><ul><li>当时的输出由当时的输入与电路的当前（原来）状态决定——具有“记忆”功能</li><li>对于触发器有两个互非的输出Q,$\overline{\text{Q}}$，Q=0时为0态，Q=1时为1态</li><li>无外加信号作用时，触发器保持原态→n级触发器可以记忆n位二进制信息的2<sup>n</sup>种状态</li><li>在外加信号的作用下，触发器可以改变原态（置1和置0）</li></ul><h3 id="基本RS锁存器"><a href="#基本RS锁存器" class="headerlink" title="基本RS锁存器"></a><em>基本RS锁存器</em></h3><p><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/2.png?raw=true" alt="电路结构"></p><ul><li>保持功能：触发器保持原来的状态不变→$\overline{\text{R}}$=1,$\overline{\text{S}}$=1</li><li>置0功能：$\overline{\text{R}}$=0，$\overline{\text{S}}$=1</li><li>置1功能：$\overline{\text{R}}$=1，$\overline{\text{S}}$=0</li><li>约束条件：$\overline{\text{R}}$+$\overline{\text{S}}$=1（R与S不同时为1）</li><li>功能表：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/3.png?raw=true" alt="功能表"></li><li>真值表：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/4.png?raw=true" alt="真值表"></li><li>特性方程：Q<sup>n+1</sup>=S+$\overline{\text{R}}$Q<sup>n</sup></li><li>状态转换图：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/5.png?raw=true" alt="状态转换图"></li></ul><h3 id="钟控RS锁存器"><a href="#钟控RS锁存器" class="headerlink" title="钟控RS锁存器"></a><em>钟控RS锁存器</em></h3><p><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/6.png?raw=true" alt="电路结构图"></p><ul><li>电位触发：在控制电位CP的控制下接收数据（正负电位触发均有可能）</li><li>CP=0时，无论R与S的输入如何，均保持原有状态</li><li>CP=1时，同基本锁存器（由R与S决定）</li><li>特性表：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/7.png?raw=true" alt="特性表"></li><li>特性方程：Q<sup>n+1</sup>=S+$\overline{\text{R}}$Q<sup>n</sup></li><li>状态图：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/8.png?raw=true" alt="状态图"></li></ul><h3 id="钟控D锁存器"><a href="#钟控D锁存器" class="headerlink" title="钟控D锁存器"></a><em>钟控D锁存器</em></h3><p><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/9.png?raw=true" alt="电路结构图"></p><ul><li>改进之处：将钟控RS锁存器的输入由R、 S双端输入改为单端输入(D)→S,R总是互非，钟控D锁存器不会出现不定状态(消除不确定状态)</li><li>CP=0时同上</li><li>CP=1时，状态由D输入决定</li><li>特性表：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/1.png?raw=true" alt="特性表"></li><li>特性方程：Q<sup>n+1</sup>=D</li><li>状态图：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/10.png?raw=true" alt="状态图"></li></ul><h3 id="D触发器"><a href="#D触发器" class="headerlink" title="D触发器"></a><em>D触发器</em></h3><p><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/11.png?raw=true" alt="电路结构图"></p><ul><li>锁存器与触发器的区别：锁存器是电位触发→只有CP处于有效电位时，状态才有可能发生发生变化；触发器的状态变化只发生在CP的有效沿（上升、下降都可能），CP=1/0时不会发生变化</li><li>构成：由两个相反（CP相反）的D钟控锁存器组成，L1为主锁存器，L2为从锁存器</li><li>CP=0时，L1通，Q1←D；L2断，Q2不变</li><li>CP：0→1时，L1断，Q1不变；L2通，Q2←Q1（触发时刻）</li><li>CP=1时，L1断，Q1不变；L2通，Q2与Q1一样也不变</li><li>使能信号：EN=1时，D触发器正常工作；EN=0时，D触发器状态不变</li><li>复位信号：RESET=1时，D触发器复位（Q=0）；RESET=0时，D触发器正常工作</li><li>寄存器：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/12.png?raw=true" alt="电路结构图"><br>（1）$\overline{\text{R}}$=0时，Q<sub>0</sub>Q<sub>1</sub>Q<sub>2</sub>Q<sub>3</sub>=0000<br>（2）CP上升沿来到时，Q<sub>0</sub>Q<sub>1</sub>Q<sub>2</sub>Q<sub>3</sub>=D<sub>0</sub>D<sub>1</sub>D<sub>2</sub>D<sub>3</sub><br>工作方式：并入并出</li></ul><h3 id="JK锁存器"><a href="#JK锁存器" class="headerlink" title="JK锁存器"></a><em>JK锁存器</em></h3><p><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/13.png?raw=true" alt="电路结构图"></p><ul><li>JK锁存器与D触发器的区别：后者无法做到保持原态（CP=1时）；前者增加两条反馈线，把R改为K，S改名为J→没有约束条件，把RS＝ 11的无效状态变为JK触发器的翻转（计数） 功能</li><li>CP=0时，保持原态</li><li>CP=1时，由J、K决定状态</li><li>特性表：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/14.png?raw=true" alt="特性表"></li><li>特性方程：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/15.png?raw=true" alt="特性方程"></li><li>状态图：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/16.png?raw=true" alt="状态图"></li></ul><hr><h2 id="2-有限状态机"><a href="#2-有限状态机" class="headerlink" title="2.有限状态机"></a>2.有限状态机</h2><h3 id="状态编码方式"><a href="#状态编码方式" class="headerlink" title="状态编码方式"></a><em>状态编码方式</em></h3><ul><li>二进制编码：采用log<sub>2</sub>N个触发器来表达N个状态→可能产生毛刺</li><li>格雷编码：触发器数量同上，但编码方式不同：G(x)=x⊕(x/2)</li><li>独热码编码：采用N个触发器来表达N个状态<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/20.png?raw=true" alt="三种编码方式比较图"><h3 id="Moore型有限状态机"><a href="#Moore型有限状态机" class="headerlink" title="Moore型有限状态机"></a><em>Moore型有限状态机</em></h3><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/21.png?raw=true" alt="概念图"></li><li>输出只与当前状态有关，与外部输入无关<h3 id="Mealy型有限状态机"><a href="#Mealy型有限状态机" class="headerlink" title="Mealy型有限状态机"></a><em>Mealy型有限状态机</em></h3><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/22.png?raw=true" alt="概念图"></li><li>输出与当前状态和外部输入均有关<h3 id="有限状态机设计步骤"><a href="#有限状态机设计步骤" class="headerlink" title="有限状态机设计步骤"></a><em>有限状态机设计步骤</em></h3></li><li>分析设计要求，列出全部的可能状态</li><li>根据上述的状态逐个对其进行分析，画出状态图</li><li>根据状态图列出状态转换表</li><li>根据状态转换表写出次态逻辑表达式和输出逻辑表达式</li><li>根据逻辑表达式写出逻辑图</li></ul><hr><h2 id="3-时序逻辑电路设计分析"><a href="#3-时序逻辑电路设计分析" class="headerlink" title="3.时序逻辑电路设计分析"></a>3.时序逻辑电路设计分析</h2><h3 id="数据寄存器"><a href="#数据寄存器" class="headerlink" title="数据寄存器"></a><em>数据寄存器</em></h3><ul><li>四位二进制数寄存器CT74175<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/23.png?raw=true" alt="示意图"><h3 id="移位寄存器-移存器"><a href="#移位寄存器-移存器" class="headerlink" title="移位寄存器(移存器)"></a><em>移位寄存器(移存器)</em></h3></li><li>描述：具有移位功能的寄存器→每来一个时钟脉冲，寄存器中的数据就向左或向右移动一位<h4 id="四位右移移位寄存器"><a href="#四位右移移位寄存器" class="headerlink" title="四位右移移位寄存器"></a>四位右移移位寄存器</h4><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/24.png?raw=true" alt="电路结构"></li><li>串入并出：经过4个周期，串行输入的4个数据全部进入寄存器，通过Q<sub>0</sub>~Q<sub>3</sub>并行输出→实现串并转换</li><li>串入串出：把最右边的触发器的输出作为电路的输出。经过4个周期后，Q<sub>3</sub>开始输出4个数据→实现延迟输出<blockquote><p>此种工作方式下，每个触发器的输出波形相同，但是后级触发器的输出比其前级输出慢一个周期</p><h4 id="四位串行输入双向移位寄存器"><a href="#四位串行输入双向移位寄存器" class="headerlink" title="四位串行输入双向移位寄存器"></a>四位串行输入双向移位寄存器</h4><p><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/25.png?raw=tru" alt="电路结构"></p></blockquote></li><li>工作原理：S=0(1)，往左(右)移；S<sub>R</sub>：右移串行输入端；S<sub>L</sub>：左移串行输入端<blockquote><p><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/26.png?raw=tru" alt="逻辑表达式"></p></blockquote></li><li>S=1时，为右移移位寄存器：功能同上</li><li>S=0时，为左移移位寄存器，功能同上，方向相反<blockquote><p>串入并出→串转并输出<br>串入串出→延迟输出<br>并入串出→并转串输出<br>并入并出→数据预置</p><h4 id="移位寄存器的拓展"><a href="#移位寄存器的拓展" class="headerlink" title="移位寄存器的拓展"></a>移位寄存器的拓展</h4><p><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/27.png?raw=tru" alt="示意图"></p><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a><em>计数器</em></h3><h4 id="同步计数器"><a href="#同步计数器" class="headerlink" title="同步计数器"></a>同步计数器</h4><p>计数器有许多不同的分类方式：</p><ul><li>时钟方式→根据触发器时钟端CP的连接方式分为：同步计数器和异步计数器</li><li>计数方式→二进制计数器、十进制计数器、M进制计数器</li><li>状态变化→加法计数器、减法计数器、加减法计数器<h5 id="①十进制同步加法计数器"><a href="#①十进制同步加法计数器" class="headerlink" title="①十进制同步加法计数器"></a>①十进制同步加法计数器</h5></li></ul></blockquote></li><li>电路结构：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/28.png?raw=tru" alt="电路结构"></li><li>方程式：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/29.png?raw=tru" alt="方程式"></li><li>状态转换表<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/30.png?raw=tru" alt="状态转换表"></li><li>逻辑表达式<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/31.png?raw=tru" alt="逻辑表达式"><blockquote><ul><li>方程式中J<sub>1</sub>的设计体现了十进制的计数方式：通过观察状态转换表发现从1010~1111都是无效状态，如果单纯地将J<sub>1</sub>=Q<sub>0</sub>(同K一样)，那么当遇到1111时，计数器仍会工作，这就产生了矛盾</li><li>本机器十进制的意思是每10次时钟脉冲就记录一次</li><li>注意：这里的有效沿为下降沿</li><li>其工作频率只与一个触发器的时钟到输出的传输延迟有关，所有其工作频率比异步计数器高<h5 id="②二进制同步加法计数器"><a href="#②二进制同步加法计数器" class="headerlink" title="②二进制同步加法计数器"></a>②二进制同步加法计数器</h5></li></ul></blockquote></li><li>电路结构：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/32.png?raw=tru" alt="电路结构"></li><li>方程式：<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/33.png?raw=tru" alt="方程式"></li><li>状态转换表<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/34.png?raw=tru" alt="状态转换表"></li><li>逻辑表达式<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/33.png?raw=tru" alt="逻辑表达式"><blockquote><ul><li>本机器二进制的意思是每16次时钟脉冲就记录一次</li><li>二进制加法计数器的状态循环个数为：2<sup>n</sup>(n时触发器的级数)</li><li>Q<sub>0</sub>、Q<sub>1</sub>、Q<sub>2</sub>、Q<sub>3</sub>的周期分别是2、4、8、16，即它们对CP波形进行了2、4、8、16的分频，因此二进制计数器也被称作分频器<br><img src="https://github.com/BUAA-yangyang/BUAA-yangyang.github.io/blob/master/medias/banner/35.png?raw=tru" alt="时序图与状态图"><h4 id="异步计数器"><a href="#异步计数器" class="headerlink" title="异步计数器"></a>异步计数器</h4>（未完待续</li></ul></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令</title>
      <link href="/2023/10/09/linux-ming-ling/"/>
      <url>/2023/10/09/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h1><hr><h2 id="1-基础操作命令"><a href="#1-基础操作命令" class="headerlink" title="1.基础操作命令"></a>1.基础操作命令</h2><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a><em>cd</em></h3><ul><li>功能描述：切换目录</li><li>格式：cd[相对路径/绝对路径/特殊符号]</li><li>用法：①不加参数→默认切换到用户主目录；②接绝对/相对路径→切换到对应目录；③接“~”→切换到主目录；④接“-”→返回到上次所在的目录；⑤接“..”→返回上级目录；⑥“../..”返回上两级目录；<br>（未完待续）<br>Linux真TM难学，助教看见了可以多来捞捞吗（闭目</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合逻辑</title>
      <link href="/2023/10/08/zu-he-luo-ji/"/>
      <url>/2023/10/08/zu-he-luo-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="组合逻辑"><a href="#组合逻辑" class="headerlink" title="组合逻辑"></a>组合逻辑</h1><hr><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="组合逻辑电路特点"><a href="#组合逻辑电路特点" class="headerlink" title="组合逻辑电路特点"></a><em>组合逻辑电路特点</em></h3><ul><li>无记忆，由逻辑门电路组成———-</li><li>没有反馈电路和存储电路（触发器、RAM等）</li><li>当时的输出仅由当时的输入决定（速度快）</li></ul><h3 id="组合逻辑电路分析方法"><a href="#组合逻辑电路分析方法" class="headerlink" title="组合逻辑电路分析方法"></a><em>组合逻辑电路分析方法</em></h3><ul><li>根据所给的电路图分析，<strong>从后往前</strong>推出<strong><em>逻辑表达式F</em></strong></li><li>根据电路图逐个枚举写出<strong><em>真值表</em></strong>（若表达式F为最小项标准也可直接写出）</li><li>观察真值表中F取值为“1”的情况对<strong><em>电路功能进行描述</em></strong>（如果表达式为最小项标准也可以由此观察得到结论）</li></ul><p>注意：常见的逻辑电路有：<u>三变量奇校验、二进制码转格雷码、异或实现……</u></p><h3 id="组合逻辑电路设计方法"><a href="#组合逻辑电路设计方法" class="headerlink" title="组合逻辑电路设计方法"></a><em>组合逻辑电路设计方法</em></h3><ul><li>将题目描述的功能要求进行<strong>逻辑抽象</strong>：确定输入输出变量的含义，再通过枚举写出<strong><em>真值表</em></strong>（注意可能有在该题意境下<del>无意义</del>的情况）</li><li>由真值表中“1”的情况写出<strong><em>逻辑表达式</em></strong>，再对其进行化简（代数法、卡诺图法、观察法：<u>如某个变量一旦取1则F比取1，则可以把这个变量单列出来</u>）</li><li>根据逻辑表达式F画出<strong><em>电路图</em></strong></li></ul><hr><h2 id="2-运算电路"><a href="#2-运算电路" class="headerlink" title="2.运算电路"></a>2.运算电路</h2><h3 id="加法器"><a href="#加法器" class="headerlink" title="加法器"></a><em>加法器</em></h3><h4 id="①半加器"><a href="#①半加器" class="headerlink" title="①半加器"></a>①半加器</h4><ul><li>特点描述：不考虑低位进位，考虑高位进位</li><li>输入：两个一位二进制数：A和B</li><li>输出：原位和→S=A⊕B，进位数→C=A*B</li></ul><h4 id="②全加器"><a href="#②全加器" class="headerlink" title="②全加器"></a>②全加器</h4><ul><li>特定描述：考虑低位进位和高位进位</li><li>输入：三个→A,B以及来自低位的进位C’</li><li>输出：原位和→S=A⊕B⊕C，进位数→C=A<em>B+C’</em>(A⊕B)</li></ul><h4 id="③多位加法器"><a href="#③多位加法器" class="headerlink" title="③多位加法器"></a>③多位加法器</h4><h5 id="串行进位："><a href="#串行进位：" class="headerlink" title="串行进位："></a>串行进位：</h5><ul><li>对于每一级的C，都要先求出上一级的进位C’</li><li>延时长</li></ul><h5 id="并行进位："><a href="#并行进位：" class="headerlink" title="并行进位："></a>并行进位：</h5><ul><li>用初始所给的各级A、B与C₀来直接求每一级的C（不必求上一级的C’，同时产生进位）</li><li>时间短，但是实现复杂</li></ul><h3 id="数值比较器"><a href="#数值比较器" class="headerlink" title="数值比较器"></a><em>数值比较器</em></h3><h4 id="①1位比较器"><a href="#①1位比较器" class="headerlink" title="①1位比较器"></a>①1位比较器</h4><ul><li>F<sub>A&gt;B</sub> = A $\overline{\text{B}}$ ;</li><li>F<sub>A&lt;B</sub> =  B $\overline{\text{A}}$ ; </li><li>F<sub>A=B</sub> = AB+ $\overline{\text{A}}$ $\overline{\text{B}}$</li></ul><h4 id="②4位比较器（7485芯片）"><a href="#②4位比较器（7485芯片）" class="headerlink" title="②4位比较器（7485芯片）"></a>②4位比较器（7485芯片）</h4><ul><li>短路比较：从高位开始比较，如出现不等情况则停止比较，若4位数全部相等，则根据I的初始输入情况（上一级四位数的比较情况）来判断本级四位数的大小情况</li><li>多片拓展时，最终的比较结果要转化成I来输入到下一级四位数的比较运算中</li></ul><h3 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a><em>ALU</em></h3><ul><li>逻辑功能：与、或</li><li>算术功能：加法→Bnegate=0、减法→Bnegate=1(Bnegate=Binvert*CarryIn)</li><li>比较功能：Less=标志位的Set→结果最高位的值</li><li>输出的标志位：ZF→零标志，取最终结果的反 $\overline{\text{sum}}$；SF→符号标志，取sum的符号位（也可由此实现比较功能）；CF→进/借位标志，取最高位的cout⊕最低位的cin(用于判断无符号数的加减法的溢出)；OF→溢出标志，取cin<sub>n-1</sub>⊕cout<sub>n-1</sub></li></ul><hr><h2 id="3-编码器"><a href="#3-编码器" class="headerlink" title="3.编码器"></a>3.编码器</h2><ul><li>将数字信号转换为二进制编码</li><li>常见的编码器只允许一个输入信号有效，否则会发生混乱</li></ul><h3 id="①8-3线编码器"><a href="#①8-3线编码器" class="headerlink" title="①8-3线编码器"></a>①<em>8-3线编码器</em></h3><ul><li>8个输入信号（只有一个是高电平→有效）</li><li>3位输出编码：C、B、A</li><li>CBA这个三位二进制数对应信号Y<sub>0</sub>~Y<sub>7</sub></li><li>可由真值表对应分别求出C、B、A的逻辑表达式，并由此画出电路图</li></ul><h3 id="②8421BCD码编码器"><a href="#②8421BCD码编码器" class="headerlink" title="②8421BCD码编码器"></a>②<em>8421BCD码编码器</em></h3><ul><li>10个输入信号（有效数同上）</li><li>4位输出编码：D、C、B、A</li><li>DCBA这个四位二进制数对应信号Y<sub>0</sub>~Y<sub>9</sub></li><li>电路图画法同上</li></ul><h3 id="③优先编码器"><a href="#③优先编码器" class="headerlink" title="③优先编码器"></a>③<em>优先编码器</em></h3><ul><li>多个有优先级别顺序的输入信号（断路编码：从优先级高的有效信号开始编码，编码成功后立即停止→可以有多个有效信号）</li><li>多个输出信号（输出优先级最高的信号对应编码的反码）</li><li>电路图画法同上</li></ul><hr><h2 id="4-译码器"><a href="#4-译码器" class="headerlink" title="4.译码器"></a>4.译码器</h2><ul><li>将二进制代码转为数字信号或有意义的电路信号</li><li>常见的译码器只允许一个输出信号有效（对应编码器的输入信号有效唯一）</li><li>高电平（低电平）有效时，每个输出都是对应的输入变量的最小项（的反）</li></ul><h3 id="①3-8线译码器（74138）"><a href="#①3-8线译码器（74138）" class="headerlink" title="①3-8线译码器（74138）"></a>①<em>3-8线译码器（74138）</em></h3><ul><li>3位输入编码→8种输出组合</li><li>8个输出：Y<sub>7</sub>~Y<sub>0</sub>（最多只有一个输出有效）</li><li>电路图画法同上</li></ul><h3 id="②BCD译码器"><a href="#②BCD译码器" class="headerlink" title="②BCD译码器"></a>②<em>BCD译码器</em></h3><ul><li>原理基本同上（不过可能存在伪码）</li></ul><h3 id="③显示译码器"><a href="#③显示译码器" class="headerlink" title="③显示译码器"></a>③<em>显示译码器</em></h3><ul><li>将二进制编码转为电路信号从而驱动显示器显示出对应的数字</li><li>对于半导体7端数码管来说，使用共阴极（阳极）LED数码管，则显示译码器的输出为高电平（低电平）输出有效</li></ul><hr><h2 id="5-多路选择器"><a href="#5-多路选择器" class="headerlink" title="5.多路选择器"></a>5.多路选择器</h2><ul><li>在控制信号的作用下，从多路输入数据选择一种作为输出数据</li></ul><h3 id="8选1多路选择器（74151）"><a href="#8选1多路选择器（74151）" class="headerlink" title="8选1多路选择器（74151）"></a><em>8选1多路选择器（74151）</em></h3><ul><li>8选1数据选择器：D<sub>7</sub>~D<sub>0</sub>为数据输入端，A<sub>2</sub>A<sub>1</sub>A<sub>0</sub>为选择控制端，通过这个三位的二进制数可以选择D<sub>7</sub> ~ D<sub>0</sub>中的一个数据</li><li>多功能运算电路：通过D<sub>7</sub>~D<sub>0</sub>取不同的值，可以从8个由A<sub>2</sub>A<sub>1</sub>A<sub>0</sub>组成的最小项选出若干个组合在一起作为输出</li></ul><hr><h2 id="6-竞争与冒险"><a href="#6-竞争与冒险" class="headerlink" title="6.竞争与冒险"></a>6.竞争与冒险</h2><h3 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a><em>现象描述</em></h3><ul><li>竞争：某个输入变量通过不同途径传到输出端时，由于耗时不同，使得到达输出端的时间也不同，这种信号不同步的现象即为竞争</li><li>冒险：门电路因输入端的竞争而导致输出端产生不正常的尖峰干扰脉冲信号（毛刺）的现象</li><li>原因：门电路和导线传输的延时</li></ul><h3 id="竞争冒险的判断"><a href="#竞争冒险的判断" class="headerlink" title="竞争冒险的判断"></a><em>竞争冒险的判断</em></h3><ul><li>代数法：当其他变量取特定的值时，可以满足F = A+$\overline{\text{A}}$（0冒险）或F = A*$\overline{\text{A}}$（1冒险）</li><li>卡诺图法：在逻辑函数的卡诺图中，函数的每个与项对应卡诺图上的一个卡诺圈，若两个卡诺圈相切，则相切处存在冒险</li></ul><h3 id="竞争冒险的消除"><a href="#竞争冒险的消除" class="headerlink" title="竞争冒险的消除"></a><em>竞争冒险的消除</em></h3><ul><li>修改逻辑设计：消除互补变量；增加冗余项（通常为其他变量取特定情况的与项），函数功能不变，但冒险会消除</li><li>引入采样脉冲：在电路的输入端引入一个采样脉冲，采样脉冲的作用时间取在电路达到新的稳定状态之后，这样，逻辑电路的输出端不会出现毛刺</li><li>输出端并联电容：对于速度较慢的组合逻辑电路，由于冒险产生的尖峰脉冲一般情况下很窄，所以可以采用在电路输出端并联电容的方法消除尖峰脉冲</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字电路 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
